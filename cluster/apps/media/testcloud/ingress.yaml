apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: testcloud
  namespace: media
  annotations:
    hajimari.io/appName: Testcloud
    hajimari.io/icon: simple-icons:nextcloud
    external-dns.alpha.kubernetes.io/target: "${CLOUDFLARE_DDNS_RECORD}"
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: "0"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/server-snippet: |-
      proxy_ssl_session_reuse off;
      proxy_hide_header X-Powered-By;

      # Rule borrowed from .htaccess to handle Microsoft DAV clients
      location = / {
        if ( $http_user_agent ~ ^DavClnt ) {
          return 302 /remote.php/webdav/$is_args$args;
        }
      }

      location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
      }

      location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in .htaccess that concern /.well-known.
        location = /.well-known/carddav { return 301 /remote.php/dav/; }
        location = /.well-known/caldav  { return 301 /remote.php/dav/; }
        location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
        location /.well-known/pki-validation    { try_files $uri $uri/ =404; }
        # Let Nextcloud's API for /.well-known URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 /index.php$request_uri;
      }

      # Rules borrowed from .htaccess to hide certain paths from clients
      location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        deny all;
      }
      location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
        deny all;
      }

      # Rule borrowed from .htaccess
      #location /remote {
      #    return 301 /remote.php$request_uri;
      #}




spec:
  ingressClassName: nginx
  rules:
    - host: &host "tc.${SECRET_DOMAIN}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: testcloud
                port:
                  number: 80
  tls:
    - hosts:
      - *host
